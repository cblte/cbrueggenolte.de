---
import Layout from "./Layout.astro";
const { frontmatter, headings } = Astro.props;
---

<Layout title={frontmatter.title}>
  <section id="pageContent" class="prose">
    <h1>{frontmatter.title}</h1>

    {
      frontmatter.toc == true && headings.length > 0 && (
        <div id="toc" class="sticky -top-1  pt-2 pb-2">
          <span class="font-medium">Table Of Contents</span>
          <ul class="flex flex-row gap-1 not-prose flex-wrap">
            {headings.map((heading) => (
              <li class="toc-item" key={heading.slug}>
                <a href={`#${heading.slug}`} class="anchor-link">
                  {heading.text}
                </a>
              </li>
            ))}
          </ul>
        </div>
      )
    }
    <slot />
  </section>
</Layout>

<script>
  // Add observer for TOC stickiness
  const tocElement = document.getElementById("toc");
  const stickyObserver = new IntersectionObserver(
    ([e]) => e.target.classList.toggle("is-sticky", e.intersectionRatio < 1),
    { threshold: [1] }
  );

  stickyObserver.observe(tocElement);

  // Function to update scroll margin based on TOC height
  function updateScrollMargin() {
    const tocHeight = tocElement.offsetHeight;
    const headings = document.querySelectorAll("h2, h3");
    headings.forEach((heading) => {
      heading.style.scrollMarginTop = `${tocHeight + 16}px`; // adding 16px padding
    });
  }

  // Initial setup
  stickyObserver.observe(tocElement);
  updateScrollMargin();

  // Update on window resize
  window.addEventListener("resize", updateScrollMargin);
</script>

<style is:inline>
  .is-sticky {
    background-color: var(--color-zinc-100);
    border-bottom: 1px solid var(--color-slate-600);
  }
  h2,
  h3 {
    scroll-margin-top: calc(toc);
  }
</style>
